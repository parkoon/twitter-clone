{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Pweet.js","components/PweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authService","firebaseInstance","storeService","fileStorageService","AuthForm","useState","email","password","values","setValues","error","setError","newAccount","onSubmit","event","a","preventDefault","createUserWithEmailAndPassword","res","signInWithEmailAndPassword","console","log","message","onChange","target","name","value","type","placeholder","required","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","onClick","Pweet","pweet","isOwner","editing","setEditing","content","newPweet","setNewPweet","onDelete","window","confirm","doc","id","delete","refFromURL","fileUrl","toggleEditing","prev","update","key","src","width","height","PweetFactory","user","setValue","fileDataUrl","setFileDataUrl","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","result","currentTarget","readAsDataURL","Home","pweets","setPweets","getPweets","get","sanpshot","docs","map","data","useEffect","onSnapshot","Navigation","to","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","getMyPweets","where","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUser","onAuthStateChanged","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAgBAA,gBAXuB,CACrBC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,4BACfK,kBAAmBL,cACnBM,MAAON,2CACPO,cAAeP,iBAKV,IAAMQ,EAAcV,SACdW,EAAmBX,EACnBY,EAAeZ,cACfa,EAAqBb,Y,gBC2CnBc,MA7Df,WAAqB,IAAD,EACUC,mBAAS,CACnCC,MAAO,GACPC,SAAU,KAHM,mBACXC,EADW,KACHC,EADG,OAKQJ,mBAAS,IALjB,mBAKXK,EALW,KAKJC,EALI,OAMkBN,oBAAS,GAN3B,mBAMXO,EANW,KAQZC,GARY,KAQJ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACfD,EAAME,iBADS,UAKTJ,EALS,gCAOCZ,EAAYiB,+BAA+BT,EAAOF,MAAOE,EAAOD,UAPjE,OAOXW,EAPW,+CAUClB,EAAYmB,2BAA2BX,EAAOF,MAAOE,EAAOD,UAV7D,QAUXW,EAVW,eAabE,QAAQC,IAAIH,GAbC,kDAebP,EAAS,KAAMW,SAfF,0DAAH,uDAkBRC,EAAW,SAACT,GAAW,IAAD,EAGtBA,EADFU,OAAUC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,MAElBN,QAAQC,IAAII,EAAMC,GAClBjB,EAAU,2BAAKD,GAAN,kBAAeiB,EAAOC,MAGjC,OACE,oCACE,0BAAMb,SAAUA,GACd,2BACEY,KAAK,QACLC,MAAOlB,EAAOF,MACdqB,KAAK,OACLC,YAAY,8GACZC,UAAQ,EACRN,SAAUA,IAEZ,2BACEE,KAAK,WACLC,MAAOlB,EAAOD,SACdoB,KAAK,WACLC,YAAY,uIACZC,UAAQ,EACRN,SAAUA,IAEZ,2BAAOI,KAAK,SAASD,MAAOd,EAAa,kCAAW,6BAEnDF,GAAS,4BAAKA,MC3BRoB,MA1Bf,WACE,IAAMC,EAAa,uCAAG,+BAAAhB,EAAA,4DAEP,YAF0BU,EAAnB,EAASD,OAAUC,QAGrCO,EAAW,IAAI/B,EAAiBgC,KAAKC,oBAE1B,WAATT,IACFO,EAAW,IAAI/B,EAAiBgC,KAAKE,oBANnB,SAQdnC,EAAYoC,gBAAgBJ,GARd,2CAAH,sDAUnB,OACE,oCACE,kBAAC,EAAD,MACA,6BACE,4BAAQP,KAAK,SAASY,QAASN,GAA/B,+CAGA,4BAAQN,KAAK,SAASY,QAASN,GAA/B,wDCwBOO,MA5Cf,YAAoC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAAW,EACHnC,oBAAS,GADN,mBAC1BoC,EAD0B,KACjBC,EADiB,OAEDrC,mBAASkC,EAAMI,SAFd,mBAE1BC,EAF0B,KAEhBC,EAFgB,KAG3BC,EAAQ,uCAAG,sBAAA/B,EAAA,0DACJgC,OAAOC,QAAQ,4DADX,gCAGP9C,EAAa+C,IAAb,iBAA2BV,EAAMW,KAAMC,SAHhC,uBAIPhD,EAAmBiD,WAAWb,EAAMc,SAASF,SAJtC,2CAAH,qDAQRG,EAAgB,kBAAMZ,GAAW,SAACa,GAAD,OAAWA,MAE5C1C,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACfD,EAAME,iBADS,SAETd,EAAa+C,IAAb,iBAA2BV,EAAMW,KAAMM,OAAO,CAAEb,QAASC,IAFhD,OAGfU,IAHe,2CAAH,sDAMd,OAAOb,EACL,oCACE,0BAAM5B,SAAUA,GACd,2BAAOa,MAAOkB,EAAUf,UAAQ,EAACD,YAAY,UAAUL,SAV5C,SAACT,GAAD,OAAW+B,EAAY/B,EAAMU,OAAOE,UAW/C,2BAAOC,KAAK,SAASD,MAAM,kBAE7B,4BAAQW,QAASiB,GAAjB,WAGF,oCACE,yBAAKG,IAAKlB,EAAMW,IACd,4BAAKX,EAAMI,SAEVJ,EAAMc,SAAW,yBAAKK,IAAKnB,EAAMc,QAASM,MAAM,OAAOC,OAAO,SAC9DpB,GACC,oCACE,4BAAQH,QAASS,GAAjB,KACA,4BAAQT,QAASiB,GAAjB,S,QCgCGO,MAlEf,YAAiC,IAATC,EAAQ,EAARA,KAAQ,EACJzD,mBAAS,IADL,mBACvBqB,EADuB,KAChBqC,EADgB,OAEQ1D,mBAAS,IAFjB,mBAEvB2D,EAFuB,KAEVC,EAFU,KAIxBpD,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACfD,EAAME,iBAEAkD,EAAU/D,EAAmBgE,MAAMC,MAAzB,UAAkCN,EAAKO,IAAvC,YAA8CC,gBAE1DjB,EAAU,IACVW,EANW,iCAOUE,EAAQK,UAAUP,EAAa,YAPzC,cAOPQ,EAPO,gBAQGA,EAASL,IAAIM,iBARhB,OAQbpB,EARa,gCAWTnD,EAAawE,WAAW,UAAUC,IAAI,CAC1CtB,UACAV,QAASjB,EACTkD,UAAWC,KAAKC,MAChBC,UAAWjB,EAAKO,MAfH,QAkBfJ,EAAe,IACfF,EAAS,IAnBM,4CAAH,sDA6Cd,OACE,0BAAMlD,SAAUA,GACd,2BACEc,KAAK,OACLD,MAAOA,EACPH,SA5BW,SAACT,GAChBiD,EAASjD,EAAMU,OAAOE,QA4BlBE,YAAY,mEACZoD,UAAW,MAEb,2BAAOrD,KAAK,OAAOsD,OAAO,UAAU1D,SA7BnB,SAACT,GAAW,IAKzBoE,EAFFpE,EADFU,OAAU2D,MAGU,GAEhBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACxE,GAAW,IAEVyE,EACfzE,EADF0E,cAAiBD,OAEnBtB,EAAesB,IAEjBH,EAAOK,cAAcP,MAgBnB,2BAAOvD,KAAK,SAASD,MAAM,iBAC1BsC,GAAe,yBAAKN,IAAKM,EAAaL,MAAM,OAAOC,OAAO,SAC3D,4BAAQvB,QAfgB,WAC1B4B,EAAe,MAcb,iBCjCSyB,MA5Bf,YAAyB,IAAT5B,EAAQ,EAARA,KAAQ,EACMzD,mBAAS,IADf,mBACfsF,EADe,KACPC,EADO,KAGhBC,EAAS,uCAAG,4BAAA9E,EAAA,sEACOb,EAAawE,WAAW,UAAUoB,MADzC,OACVC,EADU,OAEhBH,EAAUG,EAASC,KAAKC,KAAI,SAAChD,GAAD,oBAAYC,GAAID,EAAIC,IAAOD,EAAIiD,YAF3C,2CAAH,qDAYf,OAPAC,qBAAU,WACRN,IACA3F,EAAawE,WAAW,UAAU0B,YAAW,SAACL,GAC5CH,EAAUG,EAASC,KAAKC,KAAI,SAAChD,GAAD,oBAAYC,GAAID,EAAIC,IAAOD,EAAIiD,iBAE5D,IAGD,oCACE,kBAAC,EAAD,CAAcpC,KAAMA,IAEpB,6BACG6B,EAAOM,KAAI,SAAC1D,GAAD,OACV,kBAAC,EAAD,CAAOkB,IAAKlB,EAAMW,GAAIX,MAAOA,EAAOC,QAASD,EAAMwC,YAAcjB,EAAKO,YCRjEgC,MAff,YAA+B,IAATvC,EAAQ,EAARA,KACpB,OACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMwC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAYxC,EAAKyC,YAA1B,gBCgDKC,MAvDf,YAAyC,IAAtB1C,EAAqB,EAArBA,KAAM2C,EAAe,EAAfA,YAAe,EACMpG,mBAASyD,EAAKyC,aADpB,mBAC/BG,EAD+B,KACfC,EADe,KAEhCC,EAAUC,cAMVC,EAAW,uCAAG,4BAAA/F,EAAA,sEACGb,EAClBwE,WAAW,UACXqC,MAAM,YAAa,KAAMjD,EAAKO,KAE9ByB,MALe,OACZH,EADY,OAMlBvE,QAAQC,IAAIsE,GACZvE,QAAQC,IAAIsE,EAAOK,KAAKC,KAAI,SAAChD,GAAD,OAASA,EAAIiD,WAPvB,2CAAH,qDAgBXrF,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACfD,EAAME,iBAEF8C,EAAKyC,cAAgBG,EAHV,gCAIP5C,EAAKkD,cAAc,CACvBT,YAAaG,IALF,OAObD,IAPa,2CAAH,sDAed,OAJAN,qBAAU,WACRW,MACC,IAGD,oCACE,0BAAMjG,SAAUA,GACd,2BACEc,KAAK,OACLD,MAAOgF,EACP9E,YAAY,iBACZL,SA5Ba,SAACT,GAAW,IAEnBY,EACRZ,EADFU,OAAUE,MAEZiF,EAAkBjF,MA0Bd,2BAAOC,KAAK,SAASD,MAAM,oBAE7B,4BAAQW,QA/CK,WACfrC,EAAYiH,UACZL,EAAQM,KAAK,OA6CX,8BCvBSC,MAxBf,YAAuD,IAAlCV,EAAiC,EAAjCA,YAAaW,EAAoB,EAApBA,WAAYtD,EAAQ,EAARA,KAC5C,OACE,kBAAC,IAAD,KACGsD,GAAc,kBAAC,EAAD,CAAYtD,KAAMA,IACjC,kBAAC,IAAD,KACGsD,EACC,oCACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAMxD,KAAMA,KAEd,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,YAChB,kBAAC,EAAD,CAASxD,KAAMA,EAAM2C,YAAaA,MAItC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,UCYGC,MA9Bf,WAAgB,IAAD,EACWlH,oBAAS,GADpB,mBACNmH,EADM,KACAC,EADA,OAEWpH,mBAAS,MAFpB,mBAENyD,EAFM,KAEA4D,EAFA,KA2Bb,OAvBAvB,qBAAU,WACRnG,EAAY2H,oBAAmB,SAAC7D,GAC9B4D,EACE5D,EACI,CACEyC,YAAazC,EAAKyC,YAClBlC,IAAKP,EAAKO,IACV2C,cAAe,SAACY,GAAD,OAAU9D,EAAKkD,cAAcY,KAE9C,MAENH,GAAQ,QAET,IAUID,GAAQ,kBAAC,EAAD,CAAWf,YARN,WAClB,IAAM3C,EAAO9D,EAAY6H,YACzBH,EAAQ,CACNnB,YAAazC,EAAKyC,YAClBlC,IAAKP,EAAKO,IACV2C,cAAe,SAACY,GAAD,OAAU9D,EAAKkD,cAAcY,OAGIR,aAActD,EAAMA,KAAMA,KC5BhFgE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c158bbf6.chunk.js","sourcesContent":["import * as firebase from 'firebase'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\nimport 'firebase/storage'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const authService = firebase.auth()\r\nexport const firebaseInstance = firebase\r\nexport const storeService = firebase.firestore()\r\nexport const fileStorageService = firebase.storage()\r\n","import React, { useState } from 'react'\r\nimport { authService } from 'fbase'\r\n\r\nfunction AuthForm() {\r\n  const [values, setValues] = useState({\r\n    email: '',\r\n    password: '',\r\n  })\r\n  const [error, setError] = useState('')\r\n  const [newAccount, setNewAccount] = useState(true)\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    try {\r\n      let res\r\n      if (newAccount) {\r\n        // create account\r\n        res = await authService.createUserWithEmailAndPassword(values.email, values.password)\r\n      } else {\r\n        // log in\r\n        res = await authService.signInWithEmailAndPassword(values.email, values.password)\r\n      }\r\n\r\n      console.log(res)\r\n    } catch (error) {\r\n      setError(error.message)\r\n    }\r\n  }\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event\r\n    console.log(name, value)\r\n    setValues({ ...values, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          name=\"email\"\r\n          value={values.email}\r\n          type=\"text\"\r\n          placeholder=\"당신의 멋진 이메일 주소를 입력해주세요.\"\r\n          required\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          value={values.password}\r\n          type=\"password\"\r\n          placeholder=\"아무도 모르고 있는 당신의 비밀번호를 입력하세요.\"\r\n          required\r\n          onChange={onChange}\r\n        />\r\n        <input type=\"submit\" value={newAccount ? '계정 만들기' : '시작하기'} />\r\n\r\n        {error && <h1>{error}</h1>}\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AuthForm\r\n","import React from 'react'\r\n\r\nimport { authService, firebaseInstance } from 'fbase'\r\nimport AuthForm from 'components/AuthForm'\r\n\r\nfunction Auth() {\r\n  const onSocialClick = async ({ target: { name } }) => {\r\n    let provider\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider()\r\n    }\r\n    if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider()\r\n    }\r\n    await authService.signInWithPopup(provider)\r\n  }\r\n  return (\r\n    <>\r\n      <AuthForm />\r\n      <div>\r\n        <button name=\"google\" onClick={onSocialClick}>\r\n          구글로 시작하기\r\n        </button>\r\n        <button name=\"github\" onClick={onSocialClick}>\r\n          깃헙으로 시작하기\r\n        </button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Auth\r\n","import React, { useState } from 'react'\r\nimport { storeService, fileStorageService } from 'fbase'\r\n\r\nfunction Pweet({ pweet, isOwner }) {\r\n  const [editing, setEditing] = useState(false)\r\n  const [newPweet, setNewPweet] = useState(pweet.content)\r\n  const onDelete = async () => {\r\n    const ok = window.confirm('정말로 지우시겠어요?')\r\n    if (ok) {\r\n      await storeService.doc(`pweets/${pweet.id}`).delete()\r\n      await fileStorageService.refFromURL(pweet.fileUrl).delete()\r\n    }\r\n  }\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev)\r\n  const onChange = (event) => setNewPweet(event.target.value)\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault()\r\n    await storeService.doc(`pweets/${pweet.id}`).update({ content: newPweet })\r\n    toggleEditing()\r\n  }\r\n\r\n  return editing ? (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input value={newPweet} required placeholder=\"edit...\" onChange={onChange} />\r\n        <input type=\"submit\" value=\"update pweet\" />\r\n      </form>\r\n      <button onClick={toggleEditing}>cancel</button>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <div key={pweet.id}>\r\n        <h4>{pweet.content}</h4>\r\n\r\n        {pweet.fileUrl && <img src={pweet.fileUrl} width=\"50px\" height=\"50px\" />}\r\n        {isOwner && (\r\n          <>\r\n            <button onClick={onDelete}>D</button>\r\n            <button onClick={toggleEditing}>E</button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pweet\r\n","import React, { useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { storeService, fileStorageService } from 'fbase'\r\n\r\nfunction PweetFactory({ user }) {\r\n  const [value, setValue] = useState('')\r\n  const [fileDataUrl, setFileDataUrl] = useState('')\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    const fileRef = fileStorageService.ref().child(`${user.uid}/${uuidv4()}`)\r\n\r\n    let fileUrl = ''\r\n    if (fileDataUrl) {\r\n      const response = await fileRef.putString(fileDataUrl, 'data_url')\r\n      fileUrl = await response.ref.getDownloadURL()\r\n    }\r\n\r\n    await storeService.collection('pweets').add({\r\n      fileUrl,\r\n      content: value,\r\n      createdAt: Date.now(),\r\n      creatorId: user.uid,\r\n    })\r\n\r\n    setFileDataUrl('')\r\n    setValue('')\r\n  }\r\n\r\n  const onChange = (event) => {\r\n    setValue(event.target.value)\r\n  }\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event\r\n\r\n    const theFile = files[0]\r\n\r\n    const reader = new FileReader()\r\n    reader.onloadend = (event) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = event\r\n      setFileDataUrl(result)\r\n    }\r\n    reader.readAsDataURL(theFile)\r\n  }\r\n\r\n  const onClearPhotoDataUrl = () => {\r\n    setFileDataUrl('')\r\n  }\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder=\"어떤 생각을 하고 계세요?\"\r\n        maxLength={120}\r\n      />\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"트윗\" />\r\n      {fileDataUrl && <img src={fileDataUrl} width=\"50px\" height=\"50px\" />}\r\n      <button onClick={onClearPhotoDataUrl}>Clear image</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PweetFactory\r\n","import React, { useState, useEffect } from 'react'\r\nimport { storeService, fileStorageService } from 'fbase'\r\nimport Pweet from 'components/Pweet'\r\nimport PweetFactory from 'components/PweetFactory'\r\n\r\nfunction Home({ user }) {\r\n  const [pweets, setPweets] = useState([])\r\n\r\n  const getPweets = async () => {\r\n    const sanpshot = await storeService.collection('pweets').get()\r\n    setPweets(sanpshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })))\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPweets()\r\n    storeService.collection('pweets').onSnapshot((sanpshot) => {\r\n      setPweets(sanpshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })))\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <PweetFactory user={user} />\r\n\r\n      <div>\r\n        {pweets.map((pweet) => (\r\n          <Pweet key={pweet.id} pweet={pweet} isOwner={pweet.creatorId === user.uid} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Navigation({ user }) {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/profile\">{user.displayName} Profile</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import React, { useEffect, useState } from 'react'\r\nimport { authService, storeService } from 'fbase'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction Profile({ user, refreshUser }) {\r\n  const [newDisplayName, setNewDisplayName] = useState(user.displayName)\r\n  const history = useHistory()\r\n  const onLogOut = () => {\r\n    authService.signOut()\r\n    history.push('/')\r\n  }\r\n\r\n  const getMyPweets = async () => {\r\n    const pweets = await storeService\r\n      .collection('pweets')\r\n      .where('creatorId', '==', user.uid)\r\n      // .orderBy('createdAt')\r\n      .get()\r\n    console.log(pweets)\r\n    console.log(pweets.docs.map((doc) => doc.data()))\r\n  }\r\n\r\n  const onChangeName = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event\r\n    setNewDisplayName(value)\r\n  }\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    if (user.displayName !== newDisplayName) {\r\n      await user.updateProfile({\r\n        displayName: newDisplayName,\r\n      })\r\n      refreshUser()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getMyPweets()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={newDisplayName}\r\n          placeholder=\"display name..\"\r\n          onChange={onChangeName}\r\n        />\r\n        <input type=\"submit\" value=\"update profile\" />\r\n      </form>\r\n      <button onClick={onLogOut}>로그아웃</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useState } from 'react'\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Auth from '../routes/Auth'\r\nimport Home from '../routes/Home'\r\nimport Navigation from 'components/Navigation'\r\nimport Profile from 'routes/Profile'\r\n\r\nfunction AppRouter({ refreshUser, isLoggedIn, user }) {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation user={user} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home user={user} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile user={user} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default AppRouter\r\n","import React, { useState, useEffect } from 'react'\n\nimport AppRouter from 'components/Router'\nimport { authService } from 'fbase'\n\nfunction App() {\n  const [init, setInit] = useState(false)\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      setUser(\n        user\n          ? {\n              displayName: user.displayName,\n              uid: user.uid,\n              updateProfile: (args) => user.updateProfile(args),\n            }\n          : null\n      )\n      setInit(true)\n    })\n  }, [])\n\n  const refreshUser = () => {\n    const user = authService.currentUser\n    setUser({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    })\n  }\n  return init && <AppRouter refreshUser={refreshUser} isLoggedIn={!!user} user={user} />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}